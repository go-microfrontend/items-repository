// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product_characteristics.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"time"
)

const createProductCharacteristic = `-- name: CreateProductCharacteristic :exec
INSERT INTO product_characteristics (
    product_id,
    description,
    weight,
    quantity_in_package,
    shelf_life,
    storage_conditions,
    nutrition
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    ROW($7::int, $8::int, $9::int, $10::int)::nutritional_info
)
`

type CreateProductCharacteristicParams struct {
	ProductID         uuid.UUID
	Description       *string
	Weight            *int32
	QuantityInPackage *int32
	ShelfLife         time.Duration
	StorageConditions *string
	Proteins          int32
	Fats              int32
	Carbohydrates     int32
	Calories          int32
}

func (q *Queries) CreateProductCharacteristic(ctx context.Context, arg CreateProductCharacteristicParams) error {
	_, err := q.db.Exec(ctx, createProductCharacteristic,
		arg.ProductID,
		arg.Description,
		arg.Weight,
		arg.QuantityInPackage,
		arg.ShelfLife,
		arg.StorageConditions,
		arg.Proteins,
		arg.Fats,
		arg.Carbohydrates,
		arg.Calories,
	)
	return err
}

const deleteProductCharacteristicByID = `-- name: DeleteProductCharacteristicByID :exec
DELETE FROM product_characteristics WHERE product_id = $1
`

func (q *Queries) DeleteProductCharacteristicByID(ctx context.Context, productID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProductCharacteristicByID, productID)
	return err
}

const getProductCharacteristicByID = `-- name: GetProductCharacteristicByID :one
SELECT product_id, description, weight, quantity_in_package, shelf_life, storage_conditions, nutrition FROM product_characteristics WHERE product_id = $1
`

func (q *Queries) GetProductCharacteristicByID(ctx context.Context, productID uuid.UUID) (ProductCharacteristic, error) {
	row := q.db.QueryRow(ctx, getProductCharacteristicByID, productID)
	var i ProductCharacteristic
	err := row.Scan(
		&i.ProductID,
		&i.Description,
		&i.Weight,
		&i.QuantityInPackage,
		&i.ShelfLife,
		&i.StorageConditions,
		&i.Nutrition,
	)
	return i, err
}

const getProductCharacteristics = `-- name: GetProductCharacteristics :many
SELECT product_id, description, weight, quantity_in_package, shelf_life, storage_conditions, nutrition FROM product_characteristics
`

func (q *Queries) GetProductCharacteristics(ctx context.Context) ([]ProductCharacteristic, error) {
	rows, err := q.db.Query(ctx, getProductCharacteristics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductCharacteristic
	for rows.Next() {
		var i ProductCharacteristic
		if err := rows.Scan(
			&i.ProductID,
			&i.Description,
			&i.Weight,
			&i.QuantityInPackage,
			&i.ShelfLife,
			&i.StorageConditions,
			&i.Nutrition,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductCharacteristic = `-- name: UpdateProductCharacteristic :exec
UPDATE product_characteristics
SET description = $1,
    weight = $2,
    quantity_in_package = $3,
    shelf_life = $4,
    storage_conditions = $5,
    nutrition = ROW($6, $7, $8, $9)::nutritional_info
WHERE product_id = $10
`

type UpdateProductCharacteristicParams struct {
	Description       *string
	Weight            *int32
	QuantityInPackage *int32
	ShelfLife         time.Duration
	StorageConditions *string
	Column6           string
	Column7           string
	Column8           string
	Column9           string
	ProductID         uuid.UUID
}

func (q *Queries) UpdateProductCharacteristic(ctx context.Context, arg UpdateProductCharacteristicParams) error {
	_, err := q.db.Exec(ctx, updateProductCharacteristic,
		arg.Description,
		arg.Weight,
		arg.QuantityInPackage,
		arg.ShelfLife,
		arg.StorageConditions,
		arg.Column6,
		arg.Column7,
		arg.Column8,
		arg.Column9,
		arg.ProductID,
	)
	return err
}

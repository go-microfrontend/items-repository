// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: brands.sql

package repository

import (
	"context"
)

const createBrand = `-- name: CreateBrand :exec
INSERT INTO brands (name) VALUES ($1)
`

func (q *Queries) CreateBrand(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, createBrand, name)
	return err
}

const deleteBrand = `-- name: DeleteBrand :exec
DELETE FROM brands WHERE name = $1
`

func (q *Queries) DeleteBrand(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteBrand, name)
	return err
}

const getBrandByName = `-- name: GetBrandByName :one
SELECT name FROM brands WHERE name = $1
`

func (q *Queries) GetBrandByName(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, getBrandByName, name)
	err := row.Scan(&name)
	return name, err
}

const getBrands = `-- name: GetBrands :many
SELECT name FROM brands
`

func (q *Queries) GetBrands(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getBrands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrand = `-- name: UpdateBrand :exec
UPDATE brands SET name = $1 WHERE name = $2
`

type UpdateBrandParams struct {
	Name   string
	Name_2 string
}

func (q *Queries) UpdateBrand(ctx context.Context, arg UpdateBrandParams) error {
	_, err := q.db.Exec(ctx, updateBrand, arg.Name, arg.Name_2)
	return err
}

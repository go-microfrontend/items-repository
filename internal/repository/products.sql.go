// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, brand, category, price, rating)
VALUES ($1, $2, $3, $4, $5)
RETURNING product_id, name, brand, category, price, rating
`

type CreateProductParams struct {
	Name     string
	Brand    *string
	Category *string
	Price    int64
	Rating   *float32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Brand,
		arg.Category,
		arg.Price,
		arg.Rating,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Brand,
		&i.Category,
		&i.Price,
		&i.Rating,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE product_id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, productID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, productID)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT product_id, name, brand, category, price, rating FROM products WHERE product_id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, productID uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Brand,
		&i.Category,
		&i.Price,
		&i.Rating,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT product_id, name, brand, category, price, rating FROM products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.Brand,
			&i.Category,
			&i.Price,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByCategory = `-- name: GetProductsByCategory :many
SELECT product_id, name, brand, category, price, rating FROM products WHERE category = $1
`

func (q *Queries) GetProductsByCategory(ctx context.Context, category *string) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.Brand,
			&i.Category,
			&i.Price,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET name = $1,
    brand = $2,
    category = $3,
    price = $4,
    rating = $5
WHERE product_id = $6
`

type UpdateProductParams struct {
	Name      string
	Brand     *string
	Category  *string
	Price     int64
	Rating    *float32
	ProductID uuid.UUID
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.Name,
		arg.Brand,
		arg.Category,
		arg.Price,
		arg.Rating,
		arg.ProductID,
	)
	return err
}

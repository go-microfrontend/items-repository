// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package repository

import (
	"context"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO categories (name) VALUES ($1)
`

func (q *Queries) CreateCategory(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, createCategory, name)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE name = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteCategory, name)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT name, label FROM categories
`

func (q *Queries) GetCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.Name, &i.Label); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByName = `-- name: GetCategoryByName :one
SELECT name, label FROM categories WHERE name = $1
`

func (q *Queries) GetCategoryByName(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByName, name)
	var i Category
	err := row.Scan(&i.Name, &i.Label)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE categories SET name = $1 WHERE name = $2
`

type UpdateCategoryParams struct {
	Name   string
	Name_2 string
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.Exec(ctx, updateCategory, arg.Name, arg.Name_2)
	return err
}
